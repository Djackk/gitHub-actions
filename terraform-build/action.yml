name: 'Build Terraform'
description: 'Generates a tag for the repo'
inputs:
  branch:  # id of input
    description: 'Name of the master branch'
    required: false
    default: 'master'
  terraform-version:
    description: 'Terraform version'
    required: false
    default: 'v1'
  env:
    description: 'Name of the environment'
    required: false
    default: 'dev'
  region:
    description: 'Name of the region'
    required: false
    default: 'us-central1'

runs:
  using: "composite"

  steps:
    - run: echo Executing against ${{ inputs.branch }} branch.
      shell: bash

    - run: echo "${{ github.action_path }}" >> $GITHUB_PATH
      shell: bash


    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # check if environment specific file exists
    - name: Check file existence
      id: check_files
      uses: andstor/file-existence-action@v1
      with:
        files: "../env/${{ inputs.env }}/${{ inputs.region }}/terraform.tfvars"

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Format
      id: fmt
      run: |
        cd src
        terraform fmt -check -recursive
      shell: bash
      continue-on-error: true


    - name: Terraform Init
      id: init
      run: |
        cd src
        terraform init
      shell: bash


    # Generates an execution plan for Terraform
    - name: Terraform Plan with env
      id: plan
      if: steps.check_files.outputs.files_exists == 'true'
      run: |
        cd src
        terraform plan -input=false -var-file="../env/${{ inputs.env }}/${{ inputs.region }}/terraform.tfvars"
      shell: bash

    - name: Terraform Apply
      if: steps.check_files.outputs.files_exists == 'true'
      run: |
        cd src
        terraform apply -auto-approve -input=false
      shell: bash
