name: terraform-deploy

on:
  workflow_dispatch:
    inputs:

jobs:
  Deployment_Check:
    runs-on: ubuntu-latest
    steps:
      - name: Environment
        run: |
          echo "The code is being deployed in Prod"

      - name: Region Check
        run: |
          echo "${{ github.event.inputs.Region }}"

      - name: Deployment Check Failed
        if: github.ref_type != 'tag'
        run: |
          echo "Please select a Tag/Version for the deployment"
          exit 1
      - name: Deployment Check Passed
        if: github.ref_type == 'tag'
        run: |
          echo "Code will be deployed from the tag $(echo ${{ github.ref_NAME }} cut -d "/" -name )"
          exit 0
  Environment_Setup:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    permissions:
      contents: 'read'
      id-token: 'write'
    needs:
      - Deployment_Check
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v0'
        with:
          workload_identity_provider: 'projects/932079530572/locations/global/workloadIdentityPools/my-pool/providers/my-provider'
          service_account: 'auto-deploy-standard-svc@sandbox-20220909-4sfsll.iam.gserviceaccount.com'
      - run: echo "${{github.action_path}}" >> $GITHUB_PATH
        shell: bash

      - id: set-matrix
        run: |
          cd env
          args=""
          for dir in ./*/ ;do
          if  ! [[ "$(basename "$dir")" =~ ^dev.* ]];
          then
          args+="\""$(basename "$dir")"\","
          fi
          done
          echo "${args%?}"
          echo ::set-output name=env_matrix::["$(echo "${args%?}")"]
        shell: bash

      - id: set-region-matrix
        run: |
          cd env
          args=()
          for dir in ./*/;do
          if  ! [[ "$(basename "$dir")" =~ ^dev.* ]];
          then
          for subdir in "$dir"/*/;do
          args+=("$(basename "$subdir")")
          done
          fi
          # args+="\""$(basename "$dir")"\","
          done
          UNIQ_IDS=($(printf "%s\n" "${args[@]}" | sort -u))
          regions=""
          for region in ${UNIQ_IDS[@]}; do
          regions+="\""${region}"\","
          done
          echo "${regions%?}"
          echo ::set-output name=region_matrix::["$(echo "${regions%?}")"]
        shell: bash
    outputs:
      env_matrix: ${{ steps.set-matrix.outputs.env_matrix }}
      region_matrix: ${{ steps.set-region-matrix.outputs.region_matrix }}

  terraform:
    needs:
      - Environment_Setup
    name: 'Terraform'
    runs-on: ubuntu-latest
    env:
      GOOGLE_CLOUD_PROJECT: sandbox-20220909-4sfsll
    environment: production
    strategy:
      fail-fast: false
      matrix:
        env:  ${{fromJson(needs.Environment_Setup.outputs.env_matrix)}}
        region: ${{fromJson(needs.Environment_Setup.outputs.region_matrix)}}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
#       Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # check if environment specific file exists
      - name: Check file existence
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: "env/${{ matrix.env }}/${{ matrix.region }}/terraform.tfvars"

      - name: Check for Existence
        if: steps.check_files.outputs.files_exists == 'false'
        run: |
          echo "Skipping as Environment file not available...."
          exit 0
        shell: bash

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        if: steps.check_files.outputs.files_exists == 'true'
        uses: hashicorp/setup-terraform@v1

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Format
        id: fmt
        if: steps.check_files.outputs.files_exists == 'true'
        run: |
          cd src
          terraform fmt -check -recursive
        shell: bash
        continue-on-error: true

      - name: Terraform Init
        id: init
        if: steps.check_files.outputs.files_exists == 'true'
        run: |
          cd src
          terraform init
        shell: bash


      # Generates an execution plan for Terraform
      - name: Terraform Plan with env
        id: plan
        if: steps.check_files.outputs.files_exists == 'true'
        run: |
          cd src
          terraform plan -input=false -var-file="../env/${{ matrix.env }}/${{ matrix.region }}/terraform.tfvars"
        shell: bash

      - name: Terraform Apply
        if: steps.check_files.outputs.files_exists == 'true'
        run: |
          cd src
          terraform apply -auto-approve -input=false -var-file="../env/${{ matrix.env }}/${{ matrix.region }}/terraform.tfvars"
        shell: bash

#      - name: Build and Apply Terraform
#        if: steps.check_files.outputs.files_exists == 'true'
#        id: version
#        uses: Djackk/gitHub-actions/terraform-build@main
#        with:
#          branch: ${{github.ref}}
#          env: ${{matrix.env}}
#          region: ${{matrix.region}}



