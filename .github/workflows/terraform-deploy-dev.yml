name: terraform-deploy-dev

on:
  workflow_dispatch:
    inputs:
      Region:
        description: 'Region'
        default: 'us-central1'
        required: true
        type: string
      Environment:
        description: 'Environment'
        default: 'dev'
        required: true
        type: string

jobs:
  Deployment_Check:
    runs-on: ubuntu-latest
    steps:
      - name: Check for tag
        run: |
          if [ ${{github.ref_type}} == 'tag' ]; then
            echo "APK can only be created from a branch."
            exit 1
          else
            echo "APK created from a branch."
            exit 1
          fi

      - name: Environment
        run: |
          echo "The code is being deployed in ${{github.event.inputs.Environment}} Environment"

      - name: Region Check
        run: |
          echo "${{ github.event.inputs.Region }}"

      - name: Deployment Status
        run: |
          echo "Code will be deployed from $(echo ${{ github.ref_NAME }} cut -d "/" -name )"
          exit 0
          
      

  terraform:
    needs:
      - Deployment_Check
    name: 'Terraform'
    runs-on: ubuntu-latest
    env:
      GOOGLE_CLOUD_PROJECT: sandbox-20220919-xiz5gh
    environment: dev

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{github.ref}}

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v0'
        with:
          workload_identity_provider: 'projects/932079530572/locations/global/workloadIdentityPools/my-pool/providers/my-provider'
          service_account: 'auto-deploy-standard-svc@sandbox-20220919-xiz5gh.iam.gserviceaccount.com'

      # check if environment specific file exists
      - name: Check file existence
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: "env/${{ github.event.inputs.Environment }}/${{ github.event.inputs.Region }}/terraform.tfvars"

      - name: Check for Existence
        if: steps.check_files.outputs.files_exists == 'false'
        run: |
          echo "Skipping as Environment file not available...."
          exit 0
        shell: bash

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        if: steps.check_files.outputs.files_exists == 'true'
        uses: hashicorp/setup-terraform@v1

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Format
        id: fmt
        if: steps.check_files.outputs.files_exists == 'true'
        run: |
          cd src
          terraform fmt -check -recursive
        shell: bash
        continue-on-error: true

      - name: Terraform Init
        id: init
        if: steps.check_files.outputs.files_exists == 'true'
        run: |
          cd src
          terraform init
        shell: bash


      # Generates an execution plan for Terraform
      - name: Terraform Plan with env
        id: plan
        if: steps.check_files.outputs.files_exists == 'true'
        run: |
          cd src
          terraform plan -input=false -var-file="../env/${{ github.event.inputs.Environment }}/${{ github.event.inputs.Region }}/terraform.tfvars"
        shell: bash

      - name: Terraform Apply
        if: steps.check_files.outputs.files_exists == 'true'
        run: |
          cd src
          terraform apply -auto-approve -input=false -var-file="../env/${{ github.event.inputs.Environment }}/${{ github.event.inputs.Region }}/terraform.tfvars"
        shell: bash

